{"ast":null,"code":"import axios from'axios';// Create axios instance\nconst api=axios.create({baseURL:process.env.REACT_APP_API_URL||'http://localhost:8080/api',timeout:10000,headers:{'Content-Type':'application/json'}});// Request interceptor to add auth token\napi.interceptors.request.use(config=>{const token=localStorage.getItem('token');if(token){config.headers.Authorization=`Bearer ${token}`;}return config;},error=>{return Promise.reject(error);});// Response interceptor for error handling\napi.interceptors.response.use(response=>response,error=>{var _error$response;if(((_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status)===401){localStorage.removeItem('token');localStorage.removeItem('user');window.location.href='/login';}return Promise.reject(error);});// Authentication API calls\nexport const authAPI={// Login\nlogin:async credentials=>{const response=await api.post('/auth/login',credentials);return response.data;},// Get user profile\ngetProfile:async()=>{const response=await api.get('/auth/profile');return response.data;},// Register user\nregister:async userData=>{const response=await api.post('/auth/register',userData);return response.data;},// Send OTP\nsendOTP:async email=>{const response=await api.post('/auth/send-otp',{emailOrPhone:email});return response.data;},// Verify OTP\nverifyOTP:async otpData=>{const response=await api.post('/auth/verify-otp',{emailOrPhone:otpData.email,otp:otpData.otp});return response.data;},// Resend OTP\nresendOTP:async email=>{const response=await api.post('/auth/resend-otp',{emailOrPhone:email});return response.data;},// Forgot password\nforgotPassword:async emailOrPhone=>{const response=await api.post('/auth/forgot-password',{emailOrPhone});return response.data;},// Forgot user ID\nforgotUserId:async emailOrPhone=>{const response=await api.post('/auth/forgot-user-id',{emailOrPhone});return response.data;},// Reset password\nresetPassword:async resetData=>{const response=await api.post('/auth/reset-password',resetData);return response.data;},// Change password\nchangePassword:async passwordData=>{const response=await api.post('/auth/change-password',passwordData);return response.data;},// Change user ID\nchangeUserId:async userIdData=>{const response=await api.post('/auth/change-user-id',userIdData);return response.data;},// Get countries\ngetCountries:async()=>{const response=await api.get('/auth/countries');return response.data;},// Get states\ngetStates:async countryId=>{const response=await api.post('/auth/states',{countryId});return response.data;},// Get address by pincode\ngetAddressByPincode:async pincode=>{const response=await api.get(`/auth/pincode/${pincode}`);return response.data;}};// Super Admin API calls\nexport const superAdminAPI={// Get all users (registrations)\ngetAllUsers:async()=>{const response=await api.get('/super-admin/registration-list');return response.data;},// Get registration list with filters\ngetRegistrationList:async function(){let filters=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};const response=await api.get('/super-admin/registration-list',{params:filters});return response.data;},// Get registration list by status\ngetRegistrationListByStatus:async status=>{const response=await api.get('/super-admin/registration-list/filter',{params:{status}});return response.data;},// Search registrations\nsearchRegistrations:async query=>{const response=await api.get('/super-admin/registration-list/search',{params:{query}});return response.data;},// Get pending registrations\ngetPendingRegistrations:async()=>{const response=await api.get('/super-admin/pending-registrations');return response.data;},// Get approved users\ngetApprovedUsers:async()=>{const response=await api.get('/super-admin/approved-users');return response.data;},// Get users by role\ngetUsersByRole:async role=>{const response=await api.get(`/super-admin/users/by-role/${role}`);return response.data;},// Get pending users by role\ngetPendingUsersByRole:async role=>{const response=await api.get(`/super-admin/pending-users/by-role/${role}`);return response.data;},// Approve user\napproveUser:async(userId,role)=>{const response=await api.put(`/auth/users/${userId}/approve`,{role});return response.data;},// Reject user (update status to REJECTED)\nrejectUser:async(userId,reason)=>{const response=await api.put(`/auth/users/${userId}/status`,{status:'REJECTED'});return response.data;},// Delete user\ndeleteUser:async userId=>{const response=await api.delete(`/super-admin/users/${userId}`);return response.data;},// Update user\nupdateUser:async(userId,userData)=>{const response=await api.put(`/super-admin/users/${userId}`,userData);return response.data;},// Update user status\nupdateUserStatus:async(userId,status)=>{const response=await api.put(`/auth/users/${userId}/status`,{status});return response.data;},// Get dashboard stats\ngetDashboardStats:async()=>{const response=await api.get('/public/dashboard/stats');return response.data;},// Bulk assign farmers to employee\nbulkAssignFarmers:async(farmerIds,employeeId)=>{const response=await api.post('/super-admin/bulk-assign-farmers',{farmerIds,employeeId});return response.data;},// Single assign farmer to employee (fallback)\nassignFarmer:async(farmerId,employeeId)=>{const response=await api.post('/super-admin/assign-farmer',null,{params:{farmerId,employeeId}});return response.data;},// Get user by ID\ngetUserById:async userId=>{const response=await api.get(`/super-admin/users/${userId}`);return response.data;},// Force password change\nforcePasswordChange:async userId=>{const response=await api.put(`/super-admin/users/${userId}/force-password-change`);return response.data;}};// Farmers API calls\nexport const farmersAPI={// Get all farmers\ngetAllFarmers:async function(){let filters=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};const response=await api.get('/super-admin/farmers',{params:filters});return response.data;},// Get farmer by ID\ngetFarmerById:async id=>{const response=await api.get(`/super-admin/farmers/${id}`);return response.data;},// Create farmer\ncreateFarmer:async farmerData=>{const response=await api.post('/super-admin/farmers',farmerData);return response.data;},// Update farmer\nupdateFarmer:async(id,farmerData)=>{const response=await api.put(`/super-admin/farmers/${id}`,farmerData);return response.data;},// Delete farmer\ndeleteFarmer:async id=>{const response=await api.delete(`/super-admin/farmers/${id}`);return response.data;},// Assign farmer to employee\nassignFarmer:async(farmerId,employeeId)=>{const response=await api.post(`/super-admin/farmers/${farmerId}/assign`,{employeeId});return response.data;},// Get farmer statistics\ngetFarmerStats:async()=>{const response=await api.get('/super-admin/farmers/stats');return response.data;}};// Admin-specific API calls\nexport const adminAPI={// Get all farmers for admin\ngetAllFarmers:async function(){let filters=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};const response=await api.get('/admin/farmers',{params:filters});return response.data;},// Get all employees for admin\ngetAllEmployees:async function(){let filters=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};const response=await api.get('/admin/employees',{params:filters});return response.data;},// Get farmers with KYC status\ngetFarmersWithKyc:async()=>{const response=await api.get('/admin/farmers-with-kyc');return response.data;},// Get employees with stats\ngetEmployeesWithStats:async()=>{const response=await api.get('/admin/employees-with-stats');return response.data;},// Get farmers by employee\ngetFarmersByEmployee:async employeeId=>{const response=await api.get(`/admin/employees/${employeeId}/assigned-farmers`);return response.data;},// Get todo list for admin\ngetTodoList:async()=>{const response=await api.get('/admin/todo-list');return response.data;},// Get enhanced todo list\ngetEnhancedTodoList:async()=>{const response=await api.get('/admin/enhanced-todo-list');return response.data;},// Get dashboard stats\ngetDashboardStats:async()=>{const response=await api.get('/admin/dashboard-stats');return response.data;},// Filter farmers\nfilterFarmers:async function(){let filters=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};const response=await api.get('/admin/farmers/filter',{params:filters});return response.data;},// Get locations\ngetLocations:async()=>{const response=await api.get('/admin/locations');return response.data;},// Bulk assign farmers to employee\nbulkAssignFarmers:async(farmerIds,employeeId)=>{const response=await api.post('/admin/bulk-assign-farmers',{farmerIds,employeeId});return response.data;},// Single assign farmer to employee (fallback)\nassignFarmer:async(farmerId,employeeId)=>{const response=await api.post('/admin/assign-farmer',null,{params:{farmerId,employeeId}});return response.data;},// Get assignment history\ngetAssignmentHistory:async function(){let filters=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};const response=await api.get('/admin/assignment-history',{params:filters});return response.data;},// Get farmers by assignment status\ngetFarmersByAssignmentStatus:async assignmentStatus=>{const response=await api.get('/admin/farmers/by-assignment-status',{params:{assignmentStatus}});return response.data;},// Get all registrations for admin\ngetAllRegistrations:async function(){let filters=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};const response=await api.get('/admin/registration-list',{params:filters});return response.data;},// Get registration list by status for admin\ngetRegistrationListByStatus:async status=>{const response=await api.get('/admin/registration-list/filter',{params:{status}});return response.data;},// Approve registration for admin\napproveRegistration:async(registrationId,approvalData)=>{const response=await api.post(`/admin/registrations/${registrationId}/approve`,approvalData);return response.data;},// Reject registration for admin\nrejectRegistration:async(registrationId,rejectionData)=>{const response=await api.post(`/admin/registrations/${registrationId}/reject`,rejectionData);return response.data;}};// Employees API calls (for Super Admin and Admin)\nexport const employeesAPI={// Get all employees\ngetAllEmployees:async function(){let filters=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};const response=await api.get('/super-admin/employees',{params:filters});return response.data;},// Get employee by ID\ngetEmployeeById:async id=>{const response=await api.get(`/super-admin/employees/${id}`);return response.data;},// Create employee\ncreateEmployee:async employeeData=>{const response=await api.post('/super-admin/employees',employeeData);return response.data;},// Update employee\nupdateEmployee:async(id,employeeData)=>{const response=await api.put(`/super-admin/employees/${id}`,employeeData);return response.data;},// Delete employee\ndeleteEmployee:async id=>{const response=await api.delete(`/super-admin/employees/${id}`);return response.data;},// Get assigned farmers for employee\ngetAssignedFarmers:async employeeId=>{const response=await api.get(`/super-admin/employees/${employeeId}/assigned-farmers`);return response.data;},// Get employee statistics\ngetEmployeeStats:async()=>{const response=await api.get('/super-admin/employees/stats');return response.data;}};// Employee-specific API calls (for Employee role)\nexport const employeeAPI={// Get assigned farmers for current employee\ngetAssignedFarmers:async employeeId=>{try{console.log('🔄 Fetching assigned farmers from dashboard endpoint');const response=await api.get('/employees/dashboard/assigned-farmers');console.log('✅ Success with dashboard endpoint');return response.data;}catch(error){console.error('❌ Failed to fetch assigned farmers:',error);throw error;}},// Get employee profile\ngetProfile:async()=>{const response=await api.get('/employees/profile');return response.data;},// Update employee profile\nupdateProfile:async profileData=>{const response=await api.put('/employees/profile',profileData);return response.data;},// Get employee statistics\ngetStats:async()=>{const response=await api.get('/employees/stats');return response.data;}};// Registrations API calls\nexport const registrationsAPI={// Get all registrations\ngetAllRegistrations:async function(){let filters=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};const response=await api.get('/registrations',{params:filters});return response.data;},// Get registration by ID\ngetRegistrationById:async id=>{const response=await api.get(`/registrations/${id}`);return response.data;},// Approve registration\napproveRegistration:async(id,approvalData)=>{const response=await api.post(`/registrations/${id}/approve`,approvalData);return response.data;},// Reject registration\nrejectRegistration:async(id,rejectionData)=>{const response=await api.post(`/registrations/${id}/reject`,rejectionData);return response.data;},// Get registration statistics\ngetRegistrationStats:async()=>{const response=await api.get('/registrations/stats');return response.data;}};// KYC API calls\nexport const kycAPI={// Upload KYC documents\nuploadDocuments:async(farmerId,documents)=>{const formData=new FormData();Object.keys(documents).forEach(key=>{if(documents[key]){formData.append(key,documents[key]);}});const response=await api.post(`/employees/kyc/${farmerId}/upload`,formData,{headers:{'Content-Type':'multipart/form-data'}});return response.data;},// Approve KYC\napproveKYC:async(farmerId,approvalData)=>{const response=await api.put(`/employees/kyc/approve/${farmerId}`);return response.data;},// Reject KYC\nrejectKYC:async(farmerId,rejectionData)=>{const response=await api.put(`/employees/kyc/reject/${farmerId}`,{reason:rejectionData.reason||'KYC rejected'});return response.data;},// Refer back KYC\nreferBackKYC:async(farmerId,referBackData)=>{const response=await api.put(`/employees/kyc/refer-back/${farmerId}`,{reason:referBackData.reason||'KYC referred back'});return response.data;},// Get KYC status\ngetKYCStatus:async farmerId=>{const response=await api.get(`/employees/kyc/${farmerId}/status`);return response.data;},// Get KYC documents\ngetKYCDocuments:async farmerId=>{const response=await api.get(`/employees/kyc/${farmerId}/documents`);return response.data;}};// Dashboard API calls\nexport const dashboardAPI={// Get dashboard statistics\ngetDashboardStats:async()=>{const response=await api.get('/dashboard/stats');return response.data;},// Get admin dashboard data\ngetAdminDashboardData:async()=>{const response=await api.get('/dashboard/admin');return response.data;},// Get super admin dashboard data\ngetSuperAdminDashboardData:async()=>{const response=await api.get('/dashboard/super-admin');return response.data;},// Get employee dashboard data\ngetEmployeeDashboardData:async employeeId=>{const response=await api.get(`/dashboard/employee/${employeeId}`);return response.data;},// Get recent activity\ngetRecentActivity:async()=>{const response=await api.get('/dashboard/recent-activity');return response.data;}};// Main API service object\nexport const apiService={// Authentication\nlogin:authAPI.login,getProfile:authAPI.getProfile,register:authAPI.register,sendOTP:authAPI.sendOTP,verifyOTP:authAPI.verifyOTP,resendOTP:authAPI.resendOTP,forgotPassword:authAPI.forgotPassword,forgotUserId:authAPI.forgotUserId,resetPassword:authAPI.resetPassword,changePassword:authAPI.changePassword,changeUserId:authAPI.changeUserId,logout:authAPI.logout,// User management\ngetAllUsers:superAdminAPI.getAllUsers,getUserById:superAdminAPI.getUserById,updateUser:superAdminAPI.updateUser,deleteUser:superAdminAPI.deleteUser,forcePasswordChange:superAdminAPI.forcePasswordChange,// Farmer management\ncreateFarmer:farmersAPI.createFarmer,getFarmerById:farmersAPI.getFarmerById,getAllFarmers:farmersAPI.getAllFarmers,updateFarmer:farmersAPI.updateFarmer,deleteFarmer:farmersAPI.deleteFarmer,getAddressByPincode:authAPI.getAddressByPincode,getFarmerDashboardData:async email=>{const response=await api.get(`/farmers/dashboard/by-email?email=${email}`);return response.data;},// Employee management\ncreateEmployee:employeesAPI.createEmployee,getEmployeeById:employeesAPI.getEmployeeById,getAllEmployees:employeesAPI.getAllEmployees,updateEmployee:employeesAPI.updateEmployee,deleteEmployee:employeesAPI.deleteEmployee,assignFarmerToEmployee:adminAPI.assignFarmer,getFarmersByEmployee:adminAPI.getFarmersByEmployee,approveKyc:kycAPI.approveKYC,referBackKyc:kycAPI.referBackKYC,rejectKyc:kycAPI.rejectKYC,// Dashboard\ngetDashboardStats:dashboardAPI.getDashboardStats,getRecentActivity:dashboardAPI.getRecentActivity,getFarmerStats:farmersAPI.getFarmerStats,getEmployeeStats:employeesAPI.getEmployeeStats,getKycStats:kycAPI.getKYCStatus,// Bulk Operations\nbulkImport:async(type,formData)=>{const response=await api.post(`/bulk/import/${type}`,formData,{headers:{'Content-Type':'multipart/form-data'}});return response.data;},bulkExport:async(type,filters)=>{const response=await api.post(`/bulk/export/${type}`,filters,{responseType:'blob'});return response.data;},downloadTemplate:async type=>{const response=await api.get(`/bulk/template/${type}`,{responseType:'blob'});return response.data;},getImportStatus:async importId=>{const response=await api.get(`/bulk/import/status/${importId}`);return response.data;},getImportHistory:async userEmail=>{const response=await api.get(`/bulk/import/history?userEmail=${userEmail}`);return response.data;},bulkAssignFarmersToEmployee:async(farmerIds,employeeId)=>{const response=await api.post('/bulk/assign/farmers-to-employee',null,{params:{farmerIds:farmerIds.join(','),employeeId}});return response.data;},// New: assign by farmer names and employee email\nbulkAssignFarmersByNames:async(farmerNames,employeeEmail)=>{const response=await api.post('/bulk/assign/farmers-by-names',{farmerNames,employeeEmail});return response.data;},bulkAssignFarmersByLocation:async(location,employee)=>{const params={location};if(typeof employee==='string')params.employeeEmail=employee;else if(employee!=null)params.employeeId=employee;const response=await api.post('/bulk/assign/farmers-by-location',null,{params});return response.data;},bulkAssignFarmersRoundRobin:async farmerIds=>{const response=await api.post('/bulk/assign/farmers-round-robin',null,{params:{farmerIds:farmerIds.join(',')}});return response.data;}};export default api;","map":{"version":3,"names":["axios","api","create","baseURL","process","env","REACT_APP_API_URL","timeout","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","authAPI","login","credentials","post","data","getProfile","get","register","userData","sendOTP","email","emailOrPhone","verifyOTP","otpData","otp","resendOTP","forgotPassword","forgotUserId","resetPassword","resetData","changePassword","passwordData","changeUserId","userIdData","getCountries","getStates","countryId","getAddressByPincode","pincode","superAdminAPI","getAllUsers","getRegistrationList","filters","arguments","length","undefined","params","getRegistrationListByStatus","searchRegistrations","query","getPendingRegistrations","getApprovedUsers","getUsersByRole","role","getPendingUsersByRole","approveUser","userId","put","rejectUser","reason","deleteUser","delete","updateUser","updateUserStatus","getDashboardStats","bulkAssignFarmers","farmerIds","employeeId","assignFarmer","farmerId","getUserById","forcePasswordChange","farmersAPI","getAllFarmers","getFarmerById","id","createFarmer","farmerData","updateFarmer","deleteFarmer","getFarmerStats","adminAPI","getAllEmployees","getFarmersWithKyc","getEmployeesWithStats","getFarmersByEmployee","getTodoList","getEnhancedTodoList","filterFarmers","getLocations","getAssignmentHistory","getFarmersByAssignmentStatus","assignmentStatus","getAllRegistrations","approveRegistration","registrationId","approvalData","rejectRegistration","rejectionData","employeesAPI","getEmployeeById","createEmployee","employeeData","updateEmployee","deleteEmployee","getAssignedFarmers","getEmployeeStats","employeeAPI","console","log","updateProfile","profileData","getStats","registrationsAPI","getRegistrationById","getRegistrationStats","kycAPI","uploadDocuments","documents","formData","FormData","Object","keys","forEach","key","append","approveKYC","rejectKYC","referBackKYC","referBackData","getKYCStatus","getKYCDocuments","dashboardAPI","getAdminDashboardData","getSuperAdminDashboardData","getEmployeeDashboardData","getRecentActivity","apiService","logout","getFarmerDashboardData","assignFarmerToEmployee","approveKyc","referBackKyc","rejectKyc","getKycStats","bulkImport","type","bulkExport","responseType","downloadTemplate","getImportStatus","importId","getImportHistory","userEmail","bulkAssignFarmersToEmployee","join","bulkAssignFarmersByNames","farmerNames","employeeEmail","bulkAssignFarmersByLocation","employee","bulkAssignFarmersRoundRobin"],"sources":["C:/karthik cc/Working-frontend/src/api/apiService.js"],"sourcesContent":["import axios from 'axios';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8080/api',\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor for error handling\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response?.status === 401) {\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n      window.location.href = '/login';\n    }\n    return Promise.reject(error);\n  }\n);\n\n// Authentication API calls\nexport const authAPI = {\n  // Login\n  login: async (credentials) => {\n    const response = await api.post('/auth/login', credentials);\n    return response.data;\n  },\n\n  // Get user profile\n  getProfile: async () => {\n    const response = await api.get('/auth/profile');\n    return response.data;\n  },\n\n  // Register user\n  register: async (userData) => {\n    const response = await api.post('/auth/register', userData);\n    return response.data;\n  },\n\n  // Send OTP\n  sendOTP: async (email) => {\n    const response = await api.post('/auth/send-otp', { emailOrPhone: email });\n    return response.data;\n  },\n\n  // Verify OTP\n  verifyOTP: async (otpData) => {\n    const response = await api.post('/auth/verify-otp', { \n      emailOrPhone: otpData.email, \n      otp: otpData.otp \n    });\n    return response.data;\n  },\n\n  // Resend OTP\n  resendOTP: async (email) => {\n    const response = await api.post('/auth/resend-otp', { emailOrPhone: email });\n    return response.data;\n  },\n\n  // Forgot password\n  forgotPassword: async (emailOrPhone) => {\n    const response = await api.post('/auth/forgot-password', { emailOrPhone });\n    return response.data;\n  },\n\n  // Forgot user ID\n  forgotUserId: async (emailOrPhone) => {\n    const response = await api.post('/auth/forgot-user-id', { emailOrPhone });\n    return response.data;\n  },\n\n  // Reset password\n  resetPassword: async (resetData) => {\n    const response = await api.post('/auth/reset-password', resetData);\n    return response.data;\n  },\n\n  // Change password\n  changePassword: async (passwordData) => {\n    const response = await api.post('/auth/change-password', passwordData);\n    return response.data;\n  },\n\n  // Change user ID\n  changeUserId: async (userIdData) => {\n    const response = await api.post('/auth/change-user-id', userIdData);\n    return response.data;\n  },\n\n  // Get countries\n  getCountries: async () => {\n    const response = await api.get('/auth/countries');\n    return response.data;\n  },\n\n  // Get states\n  getStates: async (countryId) => {\n    const response = await api.post('/auth/states', { countryId });\n    return response.data;\n  },\n\n  // Get address by pincode\n  getAddressByPincode: async (pincode) => {\n    const response = await api.get(`/auth/pincode/${pincode}`);\n    return response.data;\n  }\n};\n\n// Super Admin API calls\nexport const superAdminAPI = {\n  // Get all users (registrations)\n  getAllUsers: async () => {\n    const response = await api.get('/super-admin/registration-list');\n    return response.data;\n  },\n\n  // Get registration list with filters\n  getRegistrationList: async (filters = {}) => {\n    const response = await api.get('/super-admin/registration-list', { params: filters });\n    return response.data;\n  },\n\n  // Get registration list by status\n  getRegistrationListByStatus: async (status) => {\n    const response = await api.get('/super-admin/registration-list/filter', { params: { status } });\n    return response.data;\n  },\n\n  // Search registrations\n  searchRegistrations: async (query) => {\n    const response = await api.get('/super-admin/registration-list/search', { params: { query } });\n    return response.data;\n  },\n\n  // Get pending registrations\n  getPendingRegistrations: async () => {\n    const response = await api.get('/super-admin/pending-registrations');\n    return response.data;\n  },\n\n  // Get approved users\n  getApprovedUsers: async () => {\n    const response = await api.get('/super-admin/approved-users');\n    return response.data;\n  },\n\n  // Get users by role\n  getUsersByRole: async (role) => {\n    const response = await api.get(`/super-admin/users/by-role/${role}`);\n    return response.data;\n  },\n\n  // Get pending users by role\n  getPendingUsersByRole: async (role) => {\n    const response = await api.get(`/super-admin/pending-users/by-role/${role}`);\n    return response.data;\n  },\n\n  // Approve user\n  approveUser: async (userId, role) => {\n    const response = await api.put(`/auth/users/${userId}/approve`, { role });\n    return response.data;\n  },\n\n  // Reject user (update status to REJECTED)\n  rejectUser: async (userId, reason) => {\n    const response = await api.put(`/auth/users/${userId}/status`, { status: 'REJECTED' });\n    return response.data;\n  },\n\n  // Delete user\n  deleteUser: async (userId) => {\n    const response = await api.delete(`/super-admin/users/${userId}`);\n    return response.data;\n  },\n\n  // Update user\n  updateUser: async (userId, userData) => {\n    const response = await api.put(`/super-admin/users/${userId}`, userData);\n    return response.data;\n  },\n\n  // Update user status\n  updateUserStatus: async (userId, status) => {\n    const response = await api.put(`/auth/users/${userId}/status`, { status });\n    return response.data;\n  },\n\n  // Get dashboard stats\n  getDashboardStats: async () => {\n    const response = await api.get('/public/dashboard/stats');\n    return response.data;\n  },\n\n  // Bulk assign farmers to employee\n  bulkAssignFarmers: async (farmerIds, employeeId) => {\n    const response = await api.post('/super-admin/bulk-assign-farmers', { farmerIds, employeeId });\n    return response.data;\n  },\n\n  // Single assign farmer to employee (fallback)\n  assignFarmer: async (farmerId, employeeId) => {\n    const response = await api.post('/super-admin/assign-farmer', null, { \n      params: { farmerId, employeeId } \n    });\n    return response.data;\n  },\n\n  // Get user by ID\n  getUserById: async (userId) => {\n    const response = await api.get(`/super-admin/users/${userId}`);\n    return response.data;\n  },\n\n  // Force password change\n  forcePasswordChange: async (userId) => {\n    const response = await api.put(`/super-admin/users/${userId}/force-password-change`);\n    return response.data;\n  }\n};\n\n// Farmers API calls\nexport const farmersAPI = {\n  // Get all farmers\n  getAllFarmers: async (filters = {}) => {\n    const response = await api.get('/super-admin/farmers', { params: filters });\n    return response.data;\n  },\n\n  // Get farmer by ID\n  getFarmerById: async (id) => {\n    const response = await api.get(`/super-admin/farmers/${id}`);\n    return response.data;\n  },\n\n  // Create farmer\n  createFarmer: async (farmerData) => {\n    const response = await api.post('/super-admin/farmers', farmerData);\n    return response.data;\n  },\n\n  // Update farmer\n  updateFarmer: async (id, farmerData) => {\n    const response = await api.put(`/super-admin/farmers/${id}`, farmerData);\n    return response.data;\n  },\n\n  // Delete farmer\n  deleteFarmer: async (id) => {\n    const response = await api.delete(`/super-admin/farmers/${id}`);\n    return response.data;\n  },\n\n  // Assign farmer to employee\n  assignFarmer: async (farmerId, employeeId) => {\n    const response = await api.post(`/super-admin/farmers/${farmerId}/assign`, { employeeId });\n    return response.data;\n  },\n\n  // Get farmer statistics\n  getFarmerStats: async () => {\n    const response = await api.get('/super-admin/farmers/stats');\n    return response.data;\n  }\n};\n\n// Admin-specific API calls\nexport const adminAPI = {\n  // Get all farmers for admin\n  getAllFarmers: async (filters = {}) => {\n    const response = await api.get('/admin/farmers', { params: filters });\n    return response.data;\n  },\n\n  // Get all employees for admin\n  getAllEmployees: async (filters = {}) => {\n    const response = await api.get('/admin/employees', { params: filters });\n    return response.data;\n  },\n\n  // Get farmers with KYC status\n  getFarmersWithKyc: async () => {\n    const response = await api.get('/admin/farmers-with-kyc');\n    return response.data;\n  },\n\n  // Get employees with stats\n  getEmployeesWithStats: async () => {\n    const response = await api.get('/admin/employees-with-stats');\n    return response.data;\n  },\n\n  // Get farmers by employee\n  getFarmersByEmployee: async (employeeId) => {\n    const response = await api.get(`/admin/employees/${employeeId}/assigned-farmers`);\n    return response.data;\n  },\n\n  // Get todo list for admin\n  getTodoList: async () => {\n    const response = await api.get('/admin/todo-list');\n    return response.data;\n  },\n\n  // Get enhanced todo list\n  getEnhancedTodoList: async () => {\n    const response = await api.get('/admin/enhanced-todo-list');\n    return response.data;\n  },\n\n  // Get dashboard stats\n  getDashboardStats: async () => {\n    const response = await api.get('/admin/dashboard-stats');\n    return response.data;\n  },\n\n  // Filter farmers\n  filterFarmers: async (filters = {}) => {\n    const response = await api.get('/admin/farmers/filter', { params: filters });\n    return response.data;\n  },\n\n  // Get locations\n  getLocations: async () => {\n    const response = await api.get('/admin/locations');\n    return response.data;\n  },\n\n  // Bulk assign farmers to employee\n  bulkAssignFarmers: async (farmerIds, employeeId) => {\n    const response = await api.post('/admin/bulk-assign-farmers', { farmerIds, employeeId });\n    return response.data;\n  },\n\n  // Single assign farmer to employee (fallback)\n  assignFarmer: async (farmerId, employeeId) => {\n    const response = await api.post('/admin/assign-farmer', null, { \n      params: { farmerId, employeeId } \n    });\n    return response.data;\n  },\n\n  // Get assignment history\n  getAssignmentHistory: async (filters = {}) => {\n    const response = await api.get('/admin/assignment-history', { params: filters });\n    return response.data;\n  },\n\n  // Get farmers by assignment status\n  getFarmersByAssignmentStatus: async (assignmentStatus) => {\n    const response = await api.get('/admin/farmers/by-assignment-status', { \n      params: { assignmentStatus } \n    });\n    return response.data;\n  },\n\n  // Get all registrations for admin\n  getAllRegistrations: async (filters = {}) => {\n    const response = await api.get('/admin/registration-list', { params: filters });\n    return response.data;\n  },\n\n  // Get registration list by status for admin\n  getRegistrationListByStatus: async (status) => {\n    const response = await api.get('/admin/registration-list/filter', { params: { status } });\n    return response.data;\n  },\n\n  // Approve registration for admin\n  approveRegistration: async (registrationId, approvalData) => {\n    const response = await api.post(`/admin/registrations/${registrationId}/approve`, approvalData);\n    return response.data;\n  },\n\n  // Reject registration for admin\n  rejectRegistration: async (registrationId, rejectionData) => {\n    const response = await api.post(`/admin/registrations/${registrationId}/reject`, rejectionData);\n    return response.data;\n  }\n};\n\n// Employees API calls (for Super Admin and Admin)\nexport const employeesAPI = {\n  // Get all employees\n  getAllEmployees: async (filters = {}) => {\n    const response = await api.get('/super-admin/employees', { params: filters });\n    return response.data;\n  },\n\n  // Get employee by ID\n  getEmployeeById: async (id) => {\n    const response = await api.get(`/super-admin/employees/${id}`);\n    return response.data;\n  },\n\n  // Create employee\n  createEmployee: async (employeeData) => {\n    const response = await api.post('/super-admin/employees', employeeData);\n    return response.data;\n  },\n\n  // Update employee\n  updateEmployee: async (id, employeeData) => {\n    const response = await api.put(`/super-admin/employees/${id}`, employeeData);\n    return response.data;\n  },\n\n  // Delete employee\n  deleteEmployee: async (id) => {\n    const response = await api.delete(`/super-admin/employees/${id}`);\n    return response.data;\n  },\n\n  // Get assigned farmers for employee\n  getAssignedFarmers: async (employeeId) => {\n    const response = await api.get(`/super-admin/employees/${employeeId}/assigned-farmers`);\n    return response.data;\n  },\n\n  // Get employee statistics\n  getEmployeeStats: async () => {\n    const response = await api.get('/super-admin/employees/stats');\n    return response.data;\n  }\n};\n\n// Employee-specific API calls (for Employee role)\nexport const employeeAPI = {\n  // Get assigned farmers for current employee\n  getAssignedFarmers: async (employeeId) => {\n    try {\n      console.log('🔄 Fetching assigned farmers from dashboard endpoint');\n      const response = await api.get('/employees/dashboard/assigned-farmers');\n      console.log('✅ Success with dashboard endpoint');\n      return response.data;\n    } catch (error) {\n      console.error('❌ Failed to fetch assigned farmers:', error);\n      throw error;\n    }\n  },\n\n  // Get employee profile\n  getProfile: async () => {\n    const response = await api.get('/employees/profile');\n    return response.data;\n  },\n\n  // Update employee profile\n  updateProfile: async (profileData) => {\n    const response = await api.put('/employees/profile', profileData);\n    return response.data;\n  },\n\n  // Get employee statistics\n  getStats: async () => {\n    const response = await api.get('/employees/stats');\n    return response.data;\n  }\n};\n\n// Registrations API calls\nexport const registrationsAPI = {\n  // Get all registrations\n  getAllRegistrations: async (filters = {}) => {\n    const response = await api.get('/registrations', { params: filters });\n    return response.data;\n  },\n\n  // Get registration by ID\n  getRegistrationById: async (id) => {\n    const response = await api.get(`/registrations/${id}`);\n    return response.data;\n  },\n\n  // Approve registration\n  approveRegistration: async (id, approvalData) => {\n    const response = await api.post(`/registrations/${id}/approve`, approvalData);\n    return response.data;\n  },\n\n  // Reject registration\n  rejectRegistration: async (id, rejectionData) => {\n    const response = await api.post(`/registrations/${id}/reject`, rejectionData);\n    return response.data;\n  },\n\n  // Get registration statistics\n  getRegistrationStats: async () => {\n    const response = await api.get('/registrations/stats');\n    return response.data;\n  }\n};\n\n// KYC API calls\nexport const kycAPI = {\n  // Upload KYC documents\n  uploadDocuments: async (farmerId, documents) => {\n    const formData = new FormData();\n    Object.keys(documents).forEach(key => {\n      if (documents[key]) {\n        formData.append(key, documents[key]);\n      }\n    });\n    \n    const response = await api.post(`/employees/kyc/${farmerId}/upload`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    });\n    return response.data;\n  },\n\n  // Approve KYC\n  approveKYC: async (farmerId, approvalData) => {\n    const response = await api.put(`/employees/kyc/approve/${farmerId}`);\n    return response.data;\n  },\n\n  // Reject KYC\n  rejectKYC: async (farmerId, rejectionData) => {\n    const response = await api.put(`/employees/kyc/reject/${farmerId}`, {\n      reason: rejectionData.reason || 'KYC rejected'\n    });\n    return response.data;\n  },\n\n  // Refer back KYC\n  referBackKYC: async (farmerId, referBackData) => {\n    const response = await api.put(`/employees/kyc/refer-back/${farmerId}`, {\n      reason: referBackData.reason || 'KYC referred back'\n    });\n    return response.data;\n  },\n\n  // Get KYC status\n  getKYCStatus: async (farmerId) => {\n    const response = await api.get(`/employees/kyc/${farmerId}/status`);\n    return response.data;\n  },\n\n  // Get KYC documents\n  getKYCDocuments: async (farmerId) => {\n    const response = await api.get(`/employees/kyc/${farmerId}/documents`);\n    return response.data;\n  }\n};\n\n// Dashboard API calls\nexport const dashboardAPI = {\n  // Get dashboard statistics\n  getDashboardStats: async () => {\n    const response = await api.get('/dashboard/stats');\n    return response.data;\n  },\n\n  // Get admin dashboard data\n  getAdminDashboardData: async () => {\n    const response = await api.get('/dashboard/admin');\n    return response.data;\n  },\n\n  // Get super admin dashboard data\n  getSuperAdminDashboardData: async () => {\n    const response = await api.get('/dashboard/super-admin');\n    return response.data;\n  },\n\n  // Get employee dashboard data\n  getEmployeeDashboardData: async (employeeId) => {\n    const response = await api.get(`/dashboard/employee/${employeeId}`);\n    return response.data;\n  },\n\n  // Get recent activity\n  getRecentActivity: async () => {\n    const response = await api.get('/dashboard/recent-activity');\n    return response.data;\n  }\n};\n\n// Main API service object\nexport const apiService = {\n  // Authentication\n  login: authAPI.login,\n  getProfile: authAPI.getProfile,\n  register: authAPI.register,\n  sendOTP: authAPI.sendOTP,\n  verifyOTP: authAPI.verifyOTP,\n  resendOTP: authAPI.resendOTP,\n  forgotPassword: authAPI.forgotPassword,\n  forgotUserId: authAPI.forgotUserId,\n  resetPassword: authAPI.resetPassword,\n  changePassword: authAPI.changePassword,\n  changeUserId: authAPI.changeUserId,\n  logout: authAPI.logout,\n\n  // User management\n  getAllUsers: superAdminAPI.getAllUsers,\n  getUserById: superAdminAPI.getUserById,\n  updateUser: superAdminAPI.updateUser,\n  deleteUser: superAdminAPI.deleteUser,\n  forcePasswordChange: superAdminAPI.forcePasswordChange,\n\n  // Farmer management\n  createFarmer: farmersAPI.createFarmer,\n  getFarmerById: farmersAPI.getFarmerById,\n  getAllFarmers: farmersAPI.getAllFarmers,\n  updateFarmer: farmersAPI.updateFarmer,\n  deleteFarmer: farmersAPI.deleteFarmer,\n  getAddressByPincode: authAPI.getAddressByPincode,\n  getFarmerDashboardData: async (email) => {\n    const response = await api.get(`/farmers/dashboard/by-email?email=${email}`);\n    return response.data;\n  },\n\n  // Employee management\n  createEmployee: employeesAPI.createEmployee,\n  getEmployeeById: employeesAPI.getEmployeeById,\n  getAllEmployees: employeesAPI.getAllEmployees,\n  updateEmployee: employeesAPI.updateEmployee,\n  deleteEmployee: employeesAPI.deleteEmployee,\n  assignFarmerToEmployee: adminAPI.assignFarmer,\n  getFarmersByEmployee: adminAPI.getFarmersByEmployee,\n  approveKyc: kycAPI.approveKYC,\n  referBackKyc: kycAPI.referBackKYC,\n  rejectKyc: kycAPI.rejectKYC,\n\n  // Dashboard\n  getDashboardStats: dashboardAPI.getDashboardStats,\n  getRecentActivity: dashboardAPI.getRecentActivity,\n  getFarmerStats: farmersAPI.getFarmerStats,\n  getEmployeeStats: employeesAPI.getEmployeeStats,\n  getKycStats: kycAPI.getKYCStatus,\n\n  // Bulk Operations\n  bulkImport: async (type, formData) => {\n    const response = await api.post(`/bulk/import/${type}`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    });\n    return response.data;\n  },\n\n  bulkExport: async (type, filters) => {\n    const response = await api.post(`/bulk/export/${type}`, filters, {\n      responseType: 'blob',\n    });\n    return response.data;\n  },\n\n  downloadTemplate: async (type) => {\n    const response = await api.get(`/bulk/template/${type}`, {\n      responseType: 'blob',\n    });\n    return response.data;\n  },\n\n  getImportStatus: async (importId) => {\n    const response = await api.get(`/bulk/import/status/${importId}`);\n    return response.data;\n  },\n\n  getImportHistory: async (userEmail) => {\n    const response = await api.get(`/bulk/import/history?userEmail=${userEmail}`);\n    return response.data;\n  },\n\n  bulkAssignFarmersToEmployee: async (farmerIds, employeeId) => {\n    const response = await api.post('/bulk/assign/farmers-to-employee', null, {\n      params: {\n        farmerIds: farmerIds.join(','),\n        employeeId,\n      },\n    });\n    return response.data;\n  },\n\n  // New: assign by farmer names and employee email\n  bulkAssignFarmersByNames: async (farmerNames, employeeEmail) => {\n    const response = await api.post('/bulk/assign/farmers-by-names', {\n      farmerNames,\n      employeeEmail,\n    });\n    return response.data;\n  },\n\n  bulkAssignFarmersByLocation: async (location, employee) => {\n    const params = { location };\n    if (typeof employee === 'string') params.employeeEmail = employee;\n    else if (employee != null) params.employeeId = employee;\n    const response = await api.post('/bulk/assign/farmers-by-location', null, { params });\n    return response.data;\n  },\n\n  bulkAssignFarmersRoundRobin: async (farmerIds) => {\n    const response = await api.post('/bulk/assign/farmers-round-robin', null, {\n      params: {\n        farmerIds: farmerIds.join(','),\n      },\n    });\n    return response.data;\n  },\n};\n\nexport default api; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}