{"ast":null,"code":"import axios from 'axios';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8080/api',\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor for error handling\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\n\n// Authentication API calls\nexport const authAPI = {\n  // Login\n  login: async credentials => {\n    const response = await api.post('/auth/login', credentials);\n    return response.data;\n  },\n  // Get user profile\n  getProfile: async () => {\n    const response = await api.get('/auth/profile');\n    return response.data;\n  },\n  // Register user\n  register: async userData => {\n    const response = await api.post('/auth/register', userData);\n    return response.data;\n  },\n  // Send OTP\n  sendOTP: async email => {\n    const response = await api.post('/auth/send-otp', {\n      emailOrPhone: email\n    });\n    return response.data;\n  },\n  // Verify OTP\n  verifyOTP: async otpData => {\n    const response = await api.post('/auth/verify-otp', {\n      emailOrPhone: otpData.email,\n      otp: otpData.otp\n    });\n    return response.data;\n  },\n  // Resend OTP\n  resendOTP: async email => {\n    const response = await api.post('/auth/resend-otp', {\n      emailOrPhone: email\n    });\n    return response.data;\n  },\n  // Forgot password\n  forgotPassword: async emailOrPhone => {\n    const response = await api.post('/auth/forgot-password', {\n      emailOrPhone\n    });\n    return response.data;\n  },\n  // Forgot user ID\n  forgotUserId: async emailOrPhone => {\n    const response = await api.post('/auth/forgot-user-id', {\n      emailOrPhone\n    });\n    return response.data;\n  },\n  // Reset password\n  resetPassword: async resetData => {\n    const response = await api.post('/auth/reset-password', resetData);\n    return response.data;\n  },\n  // Change password\n  changePassword: async passwordData => {\n    const response = await api.post('/auth/change-password', passwordData);\n    return response.data;\n  },\n  // Change user ID\n  changeUserId: async userIdData => {\n    const response = await api.post('/auth/change-user-id', userIdData);\n    return response.data;\n  },\n  // Get countries\n  getCountries: async () => {\n    const response = await api.get('/auth/countries');\n    return response.data;\n  },\n  // Get states\n  getStates: async countryId => {\n    const response = await api.post('/auth/states', {\n      countryId\n    });\n    return response.data;\n  },\n  // Get address by pincode\n  getAddressByPincode: async pincode => {\n    const response = await api.get(`/auth/pincode/${pincode}`);\n    return response.data;\n  }\n};\n\n// Super Admin API calls\nexport const superAdminAPI = {\n  // Get all users (registrations)\n  getAllUsers: async () => {\n    const response = await api.get('/super-admin/registration-list');\n    return response.data;\n  },\n  // Get registration list with filters\n  getRegistrationList: async (filters = {}) => {\n    const response = await api.get('/super-admin/registration-list', {\n      params: filters\n    });\n    return response.data;\n  },\n  // Get registration list by status\n  getRegistrationListByStatus: async status => {\n    const response = await api.get('/super-admin/registration-list/filter', {\n      params: {\n        status\n      }\n    });\n    return response.data;\n  },\n  // Search registrations\n  searchRegistrations: async query => {\n    const response = await api.get('/super-admin/registration-list/search', {\n      params: {\n        query\n      }\n    });\n    return response.data;\n  },\n  // Get pending registrations\n  getPendingRegistrations: async () => {\n    const response = await api.get('/super-admin/pending-registrations');\n    return response.data;\n  },\n  // Get approved users\n  getApprovedUsers: async () => {\n    const response = await api.get('/super-admin/approved-users');\n    return response.data;\n  },\n  // Get users by role\n  getUsersByRole: async role => {\n    const response = await api.get(`/super-admin/users/by-role/${role}`);\n    return response.data;\n  },\n  // Get pending users by role\n  getPendingUsersByRole: async role => {\n    const response = await api.get(`/super-admin/pending-users/by-role/${role}`);\n    return response.data;\n  },\n  // Approve user\n  approveUser: async (userId, role) => {\n    const response = await api.put(`/auth/users/${userId}/approve`, {\n      role\n    });\n    return response.data;\n  },\n  // Reject user (update status to REJECTED)\n  rejectUser: async (userId, reason) => {\n    const response = await api.put(`/auth/users/${userId}/status`, {\n      status: 'REJECTED'\n    });\n    return response.data;\n  },\n  // Delete user\n  deleteUser: async userId => {\n    const response = await api.delete(`/super-admin/users/${userId}`);\n    return response.data;\n  },\n  // Update user\n  updateUser: async (userId, userData) => {\n    const response = await api.put(`/super-admin/users/${userId}`, userData);\n    return response.data;\n  },\n  // Update user status\n  updateUserStatus: async (userId, status) => {\n    const response = await api.put(`/auth/users/${userId}/status`, {\n      status\n    });\n    return response.data;\n  },\n  // Get dashboard stats\n  getDashboardStats: async () => {\n    const response = await api.get('/public/dashboard/stats');\n    return response.data;\n  },\n  // Bulk assign farmers to employee\n  bulkAssignFarmers: async (farmerIds, employeeId) => {\n    const response = await api.post('/super-admin/bulk-assign-farmers', {\n      farmerIds,\n      employeeId\n    });\n    return response.data;\n  },\n  // Single assign farmer to employee (fallback)\n  assignFarmer: async (farmerId, employeeId) => {\n    const response = await api.post('/super-admin/assign-farmer', null, {\n      params: {\n        farmerId,\n        employeeId\n      }\n    });\n    return response.data;\n  },\n  // Get employee by ID\n  getEmployeeById: async employeeId => {\n    const response = await api.get(`/super-admin/employees/${employeeId}`);\n    return response.data;\n  },\n  // Update employee\n  updateEmployee: async (employeeId, employeeData) => {\n    const response = await api.put(`/super-admin/employees/${employeeId}`, employeeData);\n    return response.data;\n  },\n  // Get user by ID\n  getUserById: async userId => {\n    const response = await api.get(`/super-admin/users/${userId}`);\n    return response.data;\n  },\n  // Force password change\n  forcePasswordChange: async userId => {\n    const response = await api.put(`/super-admin/users/${userId}/force-password-change`);\n    return response.data;\n  }\n};\n\n// Farmers API calls\nexport const farmersAPI = {\n  // Get all farmers\n  getAllFarmers: async (filters = {}) => {\n    const response = await api.get('/super-admin/farmers', {\n      params: filters\n    });\n    return response.data;\n  },\n  // Get farmer by ID\n  getFarmerById: async id => {\n    const response = await api.get(`/super-admin/farmers/${id}`);\n    return response.data;\n  },\n  // Create farmer (supports files)\n  createFarmer: async farmerData => {\n    // Use the /api/farmers endpoint which supports multipart/form-data\n    const formData = new FormData();\n\n    // Extract file fields\n    const photo = farmerData.photo;\n    const passbookPhoto = farmerData.passbookPhoto;\n    const aadhaar = farmerData.documentFileName; // Map documentFileName to aadhaar\n    const soilTestCertificate = farmerData.soilTestCertificate || farmerData.currentSoilTestCertificateFileName;\n\n    // Create farmerDto object without file fields and fix field mappings\n    const farmerDto = {\n      ...farmerData\n    };\n\n    // Remove file fields\n    delete farmerDto.photo;\n    delete farmerDto.passbookPhoto;\n    delete farmerDto.documentFileName;\n    delete farmerDto.soilTestCertificate;\n    delete farmerDto.currentSoilTestCertificateFileName;\n\n    // Fix field name mappings\n    if (farmerDto.alternativeNumber) {\n      farmerDto.alternativeContactNumber = farmerDto.alternativeNumber;\n      delete farmerDto.alternativeNumber;\n    }\n\n    // Ensure required fields have default values if missing\n    if (!farmerDto.salutation) farmerDto.salutation = 'Mr';\n    if (!farmerDto.lastName) farmerDto.lastName = farmerDto.firstName || 'Unknown';\n    if (!farmerDto.dateOfBirth) farmerDto.dateOfBirth = '1990-01-01';\n    if (!farmerDto.gender) farmerDto.gender = 'Male';\n    if (!farmerDto.nationality) farmerDto.nationality = 'Indian';\n    if (!farmerDto.country) farmerDto.country = 'India';\n\n    // Ensure contact numbers match pattern (10 digits)\n    if (farmerDto.contactNumber && !/^\\d{10}$/.test(farmerDto.contactNumber)) {\n      console.warn('⚠️ Contact number must be 10 digits:', farmerDto.contactNumber);\n    }\n    if (farmerDto.alternativeContactNumber && !/^\\d{10}$/.test(farmerDto.alternativeContactNumber)) {\n      console.warn('⚠️ Alternative contact number must be 10 digits:', farmerDto.alternativeContactNumber);\n    }\n\n    // Ensure pincode is 6 digits\n    if (farmerDto.pincode && !/^\\d{6}$/.test(farmerDto.pincode)) {\n      console.warn('⚠️ Pincode must be 6 digits:', farmerDto.pincode);\n    }\n\n    // Add farmerDto as JSON string\n    formData.append('farmerDto', JSON.stringify(farmerDto));\n\n    // Add files if they exist\n    if (photo instanceof File) {\n      formData.append('photo', photo);\n    }\n    if (passbookPhoto instanceof File) {\n      formData.append('passbookPhoto', passbookPhoto);\n    }\n    if (aadhaar instanceof File) {\n      formData.append('aadhaar', aadhaar);\n    }\n    if (soilTestCertificate instanceof File) {\n      formData.append('soilTestCertificate', soilTestCertificate);\n    }\n    console.log('🔍 Sending to /api/farmers with multipart data');\n    try {\n      const response = await api.post('/farmers', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response2, _error$response3;\n      console.error('❌ Server error details:', (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data);\n      if (((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status) === 500) {\n        var _error$response4, _error$response4$data;\n        throw new Error(`Server error: ${((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || 'Internal server error. Please check all required fields.'}`);\n      }\n      throw error;\n    }\n  },\n  // Update farmer\n  updateFarmer: async (id, farmerData) => {\n    const response = await api.put(`/super-admin/farmers/${id}`, farmerData);\n    return response.data;\n  },\n  // Delete farmer\n  deleteFarmer: async id => {\n    const response = await api.delete(`/super-admin/farmers/${id}`);\n    return response.data;\n  },\n  // Assign farmer to employee\n  assignFarmer: async (farmerId, employeeId) => {\n    const response = await api.post(`/super-admin/farmers/${farmerId}/assign`, {\n      employeeId\n    });\n    return response.data;\n  },\n  // Get farmer statistics\n  getFarmerStats: async () => {\n    const response = await api.get('/super-admin/farmers/stats');\n    return response.data;\n  }\n};\n\n// Admin-specific API calls\nexport const adminAPI = {\n  // Get all farmers for admin\n  getAllFarmers: async (filters = {}) => {\n    const response = await api.get('/admin/farmers', {\n      params: filters\n    });\n    return response.data;\n  },\n  // Get all employees for admin\n  getAllEmployees: async (filters = {}) => {\n    const response = await api.get('/admin/employees', {\n      params: filters\n    });\n    return response.data;\n  },\n  // Get farmers with KYC status\n  getFarmersWithKyc: async () => {\n    const response = await api.get('/admin/farmers-with-kyc');\n    return response.data;\n  },\n  // Get employees with stats\n  getEmployeesWithStats: async () => {\n    const response = await api.get('/admin/employees-with-stats');\n    return response.data;\n  },\n  // Get farmers by employee\n  getFarmersByEmployee: async employeeId => {\n    const response = await api.get(`/admin/employees/${employeeId}/assigned-farmers`);\n    return response.data;\n  },\n  // Get todo list for admin\n  getTodoList: async () => {\n    const response = await api.get('/admin/todo-list');\n    return response.data;\n  },\n  // Get enhanced todo list\n  getEnhancedTodoList: async () => {\n    const response = await api.get('/admin/enhanced-todo-list');\n    return response.data;\n  },\n  // Get dashboard stats\n  getDashboardStats: async () => {\n    const response = await api.get('/admin/dashboard-stats');\n    return response.data;\n  },\n  // Filter farmers\n  filterFarmers: async (filters = {}) => {\n    const response = await api.get('/admin/farmers/filter', {\n      params: filters\n    });\n    return response.data;\n  },\n  // Get locations\n  getLocations: async () => {\n    const response = await api.get('/admin/locations');\n    return response.data;\n  },\n  // Bulk assign farmers to employee\n  bulkAssignFarmers: async (farmerIds, employeeId) => {\n    const response = await api.post('/admin/bulk-assign-farmers', {\n      farmerIds,\n      employeeId\n    });\n    return response.data;\n  },\n  // Single assign farmer to employee (fallback)\n  assignFarmer: async (farmerId, employeeId) => {\n    const response = await api.post('/admin/assign-farmer', null, {\n      params: {\n        farmerId,\n        employeeId\n      }\n    });\n    return response.data;\n  },\n  // Get assignment history\n  getAssignmentHistory: async (filters = {}) => {\n    const response = await api.get('/admin/assignment-history', {\n      params: filters\n    });\n    return response.data;\n  },\n  // Get farmers by assignment status\n  getFarmersByAssignmentStatus: async assignmentStatus => {\n    const response = await api.get('/admin/farmers/by-assignment-status', {\n      params: {\n        assignmentStatus\n      }\n    });\n    return response.data;\n  },\n  // Get all registrations for admin\n  getAllRegistrations: async (filters = {}) => {\n    const response = await api.get('/admin/registration-list', {\n      params: filters\n    });\n    return response.data;\n  },\n  // Get registration list by status for admin\n  getRegistrationListByStatus: async status => {\n    const response = await api.get('/admin/registration-list/filter', {\n      params: {\n        status\n      }\n    });\n    return response.data;\n  },\n  // Get employee by ID\n  getEmployeeById: async employeeId => {\n    const response = await api.get(`/admin/employees/${employeeId}`);\n    return response.data;\n  },\n  // Update employee\n  updateEmployee: async (employeeId, employeeData) => {\n    const response = await api.put(`/admin/employees/${employeeId}`, employeeData);\n    return response.data;\n  },\n  // Approve registration for admin\n  approveRegistration: async (registrationId, approvalData) => {\n    const response = await api.post(`/admin/registrations/${registrationId}/approve`, approvalData);\n    return response.data;\n  },\n  // Reject registration for admin\n  rejectRegistration: async (registrationId, rejectionData) => {\n    const response = await api.post(`/admin/registrations/${registrationId}/reject`, rejectionData);\n    return response.data;\n  }\n};\n\n// Employees API calls (for Super Admin and Admin)\nexport const employeesAPI = {\n  // Get all employees\n  getAllEmployees: async (filters = {}) => {\n    const response = await api.get('/super-admin/employees', {\n      params: filters\n    });\n    return response.data;\n  },\n  // Get employee by ID\n  getEmployeeById: async id => {\n    const response = await api.get(`/super-admin/employees/${id}`);\n    return response.data;\n  },\n  // Create employee\n  createEmployee: async employeeData => {\n    const response = await api.post('/super-admin/employees', employeeData);\n    return response.data;\n  },\n  // Update employee\n  updateEmployee: async (id, employeeData) => {\n    const response = await api.put(`/super-admin/employees/${id}`, employeeData);\n    return response.data;\n  },\n  // Delete employee\n  deleteEmployee: async id => {\n    const response = await api.delete(`/super-admin/employees/${id}`);\n    return response.data;\n  },\n  // Get assigned farmers for employee\n  getAssignedFarmers: async employeeId => {\n    const response = await api.get(`/super-admin/employees/${employeeId}/assigned-farmers`);\n    return response.data;\n  },\n  // Get employee statistics\n  getEmployeeStats: async () => {\n    const response = await api.get('/super-admin/employees/stats');\n    return response.data;\n  }\n};\n\n// Employee-specific API calls (for Employee role)\nexport const employeeAPI = {\n  // Get assigned farmers for current employee\n  getAssignedFarmers: async employeeId => {\n    try {\n      console.log('🔄 Fetching assigned farmers from dashboard endpoint');\n      const response = await api.get('/employees/dashboard/assigned-farmers');\n      console.log('✅ Success with dashboard endpoint');\n      return response.data;\n    } catch (error) {\n      console.error('❌ Failed to fetch assigned farmers:', error);\n      throw error;\n    }\n  },\n  // Get employee profile\n  getProfile: async () => {\n    const response = await api.get('/employees/profile');\n    return response.data;\n  },\n  // Update employee profile\n  updateProfile: async profileData => {\n    const response = await api.put('/employees/profile', profileData);\n    return response.data;\n  },\n  // Get employee statistics\n  getStats: async () => {\n    const response = await api.get('/employees/stats');\n    return response.data;\n  }\n};\n\n// Registrations API calls\nexport const registrationsAPI = {\n  // Get all registrations\n  getAllRegistrations: async (filters = {}) => {\n    const response = await api.get('/registrations', {\n      params: filters\n    });\n    return response.data;\n  },\n  // Get registration by ID\n  getRegistrationById: async id => {\n    const response = await api.get(`/registrations/${id}`);\n    return response.data;\n  },\n  // Approve registration\n  approveRegistration: async (id, approvalData) => {\n    const response = await api.post(`/registrations/${id}/approve`, approvalData);\n    return response.data;\n  },\n  // Reject registration\n  rejectRegistration: async (id, rejectionData) => {\n    const response = await api.post(`/registrations/${id}/reject`, rejectionData);\n    return response.data;\n  },\n  // Get registration statistics\n  getRegistrationStats: async () => {\n    const response = await api.get('/registrations/stats');\n    return response.data;\n  }\n};\n\n// KYC API calls\nexport const kycAPI = {\n  // Upload KYC documents\n  uploadDocuments: async (farmerId, documents) => {\n    const formData = new FormData();\n    Object.keys(documents).forEach(key => {\n      if (documents[key]) {\n        formData.append(key, documents[key]);\n      }\n    });\n    const response = await api.post(`/employees/kyc/${farmerId}/upload`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  },\n  // Approve KYC\n  approveKYC: async (farmerId, approvalData) => {\n    const response = await api.put(`/employees/kyc/approve/${farmerId}`);\n    return response.data;\n  },\n  // Reject KYC\n  rejectKYC: async (farmerId, rejectionData) => {\n    const response = await api.put(`/employees/kyc/reject/${farmerId}`, {\n      reason: rejectionData.reason || 'KYC rejected'\n    });\n    return response.data;\n  },\n  // Refer back KYC\n  referBackKYC: async (farmerId, referBackData) => {\n    const response = await api.put(`/employees/kyc/refer-back/${farmerId}`, {\n      reason: referBackData.reason || 'KYC referred back'\n    });\n    return response.data;\n  },\n  // Get KYC status\n  getKYCStatus: async farmerId => {\n    const response = await api.get(`/employees/kyc/${farmerId}/status`);\n    return response.data;\n  },\n  // Get KYC documents\n  getKYCDocuments: async farmerId => {\n    const response = await api.get(`/employees/kyc/${farmerId}/documents`);\n    return response.data;\n  }\n};\n\n// Dashboard API calls\nexport const dashboardAPI = {\n  // Get dashboard statistics\n  getDashboardStats: async () => {\n    const response = await api.get('/dashboard/stats');\n    return response.data;\n  },\n  // Get admin dashboard data\n  getAdminDashboardData: async () => {\n    const response = await api.get('/dashboard/admin');\n    return response.data;\n  },\n  // Get super admin dashboard data\n  getSuperAdminDashboardData: async () => {\n    const response = await api.get('/dashboard/super-admin');\n    return response.data;\n  },\n  // Get employee dashboard data\n  getEmployeeDashboardData: async employeeId => {\n    const response = await api.get(`/dashboard/employee/${employeeId}`);\n    return response.data;\n  },\n  // Get recent activity\n  getRecentActivity: async () => {\n    const response = await api.get('/dashboard/recent-activity');\n    return response.data;\n  }\n};\n\n// Main API service object\nexport const apiService = {\n  // Authentication\n  login: authAPI.login,\n  getProfile: authAPI.getProfile,\n  register: authAPI.register,\n  sendOTP: authAPI.sendOTP,\n  verifyOTP: authAPI.verifyOTP,\n  resendOTP: authAPI.resendOTP,\n  forgotPassword: authAPI.forgotPassword,\n  forgotUserId: authAPI.forgotUserId,\n  resetPassword: authAPI.resetPassword,\n  changePassword: authAPI.changePassword,\n  changeUserId: authAPI.changeUserId,\n  logout: authAPI.logout,\n  // User management\n  getAllUsers: superAdminAPI.getAllUsers,\n  getUserById: superAdminAPI.getUserById,\n  updateUser: superAdminAPI.updateUser,\n  deleteUser: superAdminAPI.deleteUser,\n  forcePasswordChange: superAdminAPI.forcePasswordChange,\n  // Farmer management\n  createFarmer: farmersAPI.createFarmer,\n  getFarmerById: farmersAPI.getFarmerById,\n  getAllFarmers: farmersAPI.getAllFarmers,\n  updateFarmer: farmersAPI.updateFarmer,\n  deleteFarmer: farmersAPI.deleteFarmer,\n  getAddressByPincode: authAPI.getAddressByPincode,\n  getFarmerDashboardData: async email => {\n    const response = await api.get(`/farmers/dashboard/by-email?email=${email}`);\n    return response.data;\n  },\n  // Employee management\n  createEmployee: employeesAPI.createEmployee,\n  getEmployeeById: employeesAPI.getEmployeeById,\n  getAllEmployees: employeesAPI.getAllEmployees,\n  updateEmployee: employeesAPI.updateEmployee,\n  deleteEmployee: employeesAPI.deleteEmployee,\n  assignFarmerToEmployee: adminAPI.assignFarmer,\n  getFarmersByEmployee: adminAPI.getFarmersByEmployee,\n  approveKyc: kycAPI.approveKYC,\n  referBackKyc: kycAPI.referBackKYC,\n  rejectKyc: kycAPI.rejectKYC,\n  // Dashboard\n  getDashboardStats: dashboardAPI.getDashboardStats,\n  getRecentActivity: dashboardAPI.getRecentActivity,\n  getFarmerStats: farmersAPI.getFarmerStats,\n  getEmployeeStats: employeesAPI.getEmployeeStats,\n  getKycStats: kycAPI.getKYCStatus,\n  // Bulk Operations\n  bulkImport: async (type, formData) => {\n    const response = await api.post(`/bulk/import/${type}`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  },\n  bulkExport: async (type, filters) => {\n    const response = await api.post(`/bulk/export/${type}`, filters, {\n      responseType: 'blob'\n    });\n    return response.data;\n  },\n  downloadTemplate: async type => {\n    const response = await api.get(`/bulk/template/${type}`, {\n      responseType: 'blob'\n    });\n    return response.data;\n  },\n  getImportStatus: async importId => {\n    const response = await api.get(`/bulk/import/status/${importId}`);\n    return response.data;\n  },\n  getImportHistory: async userEmail => {\n    const response = await api.get(`/bulk/import/history?userEmail=${userEmail}`);\n    return response.data;\n  },\n  bulkAssignFarmersToEmployee: async (farmerIds, employeeId) => {\n    const response = await api.post('/bulk/assign/farmers-to-employee', null, {\n      params: {\n        farmerIds: farmerIds.join(','),\n        employeeId\n      }\n    });\n    return response.data;\n  },\n  // New: assign by farmer names and employee email\n  bulkAssignFarmersByNames: async (farmerNames, employeeEmail) => {\n    const response = await api.post('/bulk/assign/farmers-by-names', {\n      farmerNames,\n      employeeEmail\n    });\n    return response.data;\n  },\n  bulkAssignFarmersByLocation: async (location, employee) => {\n    const params = {\n      location\n    };\n    if (typeof employee === 'string') params.employeeEmail = employee;else if (employee != null) params.employeeId = employee;\n    const response = await api.post('/bulk/assign/farmers-by-location', null, {\n      params\n    });\n    return response.data;\n  },\n  bulkAssignFarmersRoundRobin: async farmerIds => {\n    const response = await api.post('/bulk/assign/farmers-round-robin', null, {\n      params: {\n        farmerIds: farmerIds.join(',')\n      }\n    });\n    return response.data;\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","process","env","REACT_APP_API_URL","timeout","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","authAPI","login","credentials","post","data","getProfile","get","register","userData","sendOTP","email","emailOrPhone","verifyOTP","otpData","otp","resendOTP","forgotPassword","forgotUserId","resetPassword","resetData","changePassword","passwordData","changeUserId","userIdData","getCountries","getStates","countryId","getAddressByPincode","pincode","superAdminAPI","getAllUsers","getRegistrationList","filters","params","getRegistrationListByStatus","searchRegistrations","query","getPendingRegistrations","getApprovedUsers","getUsersByRole","role","getPendingUsersByRole","approveUser","userId","put","rejectUser","reason","deleteUser","delete","updateUser","updateUserStatus","getDashboardStats","bulkAssignFarmers","farmerIds","employeeId","assignFarmer","farmerId","getEmployeeById","updateEmployee","employeeData","getUserById","forcePasswordChange","farmersAPI","getAllFarmers","getFarmerById","id","createFarmer","farmerData","formData","FormData","photo","passbookPhoto","aadhaar","documentFileName","soilTestCertificate","currentSoilTestCertificateFileName","farmerDto","alternativeNumber","alternativeContactNumber","salutation","lastName","firstName","dateOfBirth","gender","nationality","country","contactNumber","test","console","warn","append","JSON","stringify","File","log","_error$response2","_error$response3","_error$response4","_error$response4$data","Error","message","updateFarmer","deleteFarmer","getFarmerStats","adminAPI","getAllEmployees","getFarmersWithKyc","getEmployeesWithStats","getFarmersByEmployee","getTodoList","getEnhancedTodoList","filterFarmers","getLocations","getAssignmentHistory","getFarmersByAssignmentStatus","assignmentStatus","getAllRegistrations","approveRegistration","registrationId","approvalData","rejectRegistration","rejectionData","employeesAPI","createEmployee","deleteEmployee","getAssignedFarmers","getEmployeeStats","employeeAPI","updateProfile","profileData","getStats","registrationsAPI","getRegistrationById","getRegistrationStats","kycAPI","uploadDocuments","documents","Object","keys","forEach","key","approveKYC","rejectKYC","referBackKYC","referBackData","getKYCStatus","getKYCDocuments","dashboardAPI","getAdminDashboardData","getSuperAdminDashboardData","getEmployeeDashboardData","getRecentActivity","apiService","logout","getFarmerDashboardData","assignFarmerToEmployee","approveKyc","referBackKyc","rejectKyc","getKycStats","bulkImport","type","bulkExport","responseType","downloadTemplate","getImportStatus","importId","getImportHistory","userEmail","bulkAssignFarmersToEmployee","join","bulkAssignFarmersByNames","farmerNames","employeeEmail","bulkAssignFarmersByLocation","employee","bulkAssignFarmersRoundRobin"],"sources":["C:/karthik cc/Working-frontend/src/api/apiService.js"],"sourcesContent":["import axios from 'axios';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8080/api',\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor for error handling\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response?.status === 401) {\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n      window.location.href = '/login';\n    }\n    return Promise.reject(error);\n  }\n);\n\n// Authentication API calls\nexport const authAPI = {\n  // Login\n  login: async (credentials) => {\n    const response = await api.post('/auth/login', credentials);\n    return response.data;\n  },\n\n  // Get user profile\n  getProfile: async () => {\n    const response = await api.get('/auth/profile');\n    return response.data;\n  },\n\n  // Register user\n  register: async (userData) => {\n    const response = await api.post('/auth/register', userData);\n    return response.data;\n  },\n\n  // Send OTP\n  sendOTP: async (email) => {\n    const response = await api.post('/auth/send-otp', { emailOrPhone: email });\n    return response.data;\n  },\n\n  // Verify OTP\n  verifyOTP: async (otpData) => {\n    const response = await api.post('/auth/verify-otp', { \n      emailOrPhone: otpData.email, \n      otp: otpData.otp \n    });\n    return response.data;\n  },\n\n  // Resend OTP\n  resendOTP: async (email) => {\n    const response = await api.post('/auth/resend-otp', { emailOrPhone: email });\n    return response.data;\n  },\n\n  // Forgot password\n  forgotPassword: async (emailOrPhone) => {\n    const response = await api.post('/auth/forgot-password', { emailOrPhone });\n    return response.data;\n  },\n\n  // Forgot user ID\n  forgotUserId: async (emailOrPhone) => {\n    const response = await api.post('/auth/forgot-user-id', { emailOrPhone });\n    return response.data;\n  },\n\n  // Reset password\n  resetPassword: async (resetData) => {\n    const response = await api.post('/auth/reset-password', resetData);\n    return response.data;\n  },\n\n  // Change password\n  changePassword: async (passwordData) => {\n    const response = await api.post('/auth/change-password', passwordData);\n    return response.data;\n  },\n\n  // Change user ID\n  changeUserId: async (userIdData) => {\n    const response = await api.post('/auth/change-user-id', userIdData);\n    return response.data;\n  },\n\n  // Get countries\n  getCountries: async () => {\n    const response = await api.get('/auth/countries');\n    return response.data;\n  },\n\n  // Get states\n  getStates: async (countryId) => {\n    const response = await api.post('/auth/states', { countryId });\n    return response.data;\n  },\n\n  // Get address by pincode\n  getAddressByPincode: async (pincode) => {\n    const response = await api.get(`/auth/pincode/${pincode}`);\n    return response.data;\n  }\n};\n\n// Super Admin API calls\nexport const superAdminAPI = {\n  // Get all users (registrations)\n  getAllUsers: async () => {\n    const response = await api.get('/super-admin/registration-list');\n    return response.data;\n  },\n\n  // Get registration list with filters\n  getRegistrationList: async (filters = {}) => {\n    const response = await api.get('/super-admin/registration-list', { params: filters });\n    return response.data;\n  },\n\n  // Get registration list by status\n  getRegistrationListByStatus: async (status) => {\n    const response = await api.get('/super-admin/registration-list/filter', { params: { status } });\n    return response.data;\n  },\n\n  // Search registrations\n  searchRegistrations: async (query) => {\n    const response = await api.get('/super-admin/registration-list/search', { params: { query } });\n    return response.data;\n  },\n\n  // Get pending registrations\n  getPendingRegistrations: async () => {\n    const response = await api.get('/super-admin/pending-registrations');\n    return response.data;\n  },\n\n  // Get approved users\n  getApprovedUsers: async () => {\n    const response = await api.get('/super-admin/approved-users');\n    return response.data;\n  },\n\n  // Get users by role\n  getUsersByRole: async (role) => {\n    const response = await api.get(`/super-admin/users/by-role/${role}`);\n    return response.data;\n  },\n\n  // Get pending users by role\n  getPendingUsersByRole: async (role) => {\n    const response = await api.get(`/super-admin/pending-users/by-role/${role}`);\n    return response.data;\n  },\n\n  // Approve user\n  approveUser: async (userId, role) => {\n    const response = await api.put(`/auth/users/${userId}/approve`, { role });\n    return response.data;\n  },\n\n  // Reject user (update status to REJECTED)\n  rejectUser: async (userId, reason) => {\n    const response = await api.put(`/auth/users/${userId}/status`, { status: 'REJECTED' });\n    return response.data;\n  },\n\n  // Delete user\n  deleteUser: async (userId) => {\n    const response = await api.delete(`/super-admin/users/${userId}`);\n    return response.data;\n  },\n\n  // Update user\n  updateUser: async (userId, userData) => {\n    const response = await api.put(`/super-admin/users/${userId}`, userData);\n    return response.data;\n  },\n\n  // Update user status\n  updateUserStatus: async (userId, status) => {\n    const response = await api.put(`/auth/users/${userId}/status`, { status });\n    return response.data;\n  },\n\n  // Get dashboard stats\n  getDashboardStats: async () => {\n    const response = await api.get('/public/dashboard/stats');\n    return response.data;\n  },\n\n  // Bulk assign farmers to employee\n  bulkAssignFarmers: async (farmerIds, employeeId) => {\n    const response = await api.post('/super-admin/bulk-assign-farmers', { farmerIds, employeeId });\n    return response.data;\n  },\n\n  // Single assign farmer to employee (fallback)\n  assignFarmer: async (farmerId, employeeId) => {\n    const response = await api.post('/super-admin/assign-farmer', null, { \n      params: { farmerId, employeeId } \n    });\n    return response.data;\n  },\n\n  // Get employee by ID\n  getEmployeeById: async (employeeId) => {\n    const response = await api.get(`/super-admin/employees/${employeeId}`);\n    return response.data;\n  },\n\n  // Update employee\n  updateEmployee: async (employeeId, employeeData) => {\n    const response = await api.put(`/super-admin/employees/${employeeId}`, employeeData);\n    return response.data;\n  },\n\n  // Get user by ID\n  getUserById: async (userId) => {\n    const response = await api.get(`/super-admin/users/${userId}`);\n    return response.data;\n  },\n\n  // Force password change\n  forcePasswordChange: async (userId) => {\n    const response = await api.put(`/super-admin/users/${userId}/force-password-change`);\n    return response.data;\n  }\n};\n\n// Farmers API calls\nexport const farmersAPI = {\n  // Get all farmers\n  getAllFarmers: async (filters = {}) => {\n    const response = await api.get('/super-admin/farmers', { params: filters });\n    return response.data;\n  },\n\n  // Get farmer by ID\n  getFarmerById: async (id) => {\n    const response = await api.get(`/super-admin/farmers/${id}`);\n    return response.data;\n  },\n\n  // Create farmer (supports files)\n  createFarmer: async (farmerData) => {\n    // Use the /api/farmers endpoint which supports multipart/form-data\n    const formData = new FormData();\n    \n    // Extract file fields\n    const photo = farmerData.photo;\n    const passbookPhoto = farmerData.passbookPhoto;\n    const aadhaar = farmerData.documentFileName; // Map documentFileName to aadhaar\n    const soilTestCertificate = farmerData.soilTestCertificate || farmerData.currentSoilTestCertificateFileName;\n    \n    // Create farmerDto object without file fields and fix field mappings\n    const farmerDto = { ...farmerData };\n    \n    // Remove file fields\n    delete farmerDto.photo;\n    delete farmerDto.passbookPhoto;\n    delete farmerDto.documentFileName;\n    delete farmerDto.soilTestCertificate;\n    delete farmerDto.currentSoilTestCertificateFileName;\n    \n    // Fix field name mappings\n    if (farmerDto.alternativeNumber) {\n      farmerDto.alternativeContactNumber = farmerDto.alternativeNumber;\n      delete farmerDto.alternativeNumber;\n    }\n    \n    // Ensure required fields have default values if missing\n    if (!farmerDto.salutation) farmerDto.salutation = 'Mr';\n    if (!farmerDto.lastName) farmerDto.lastName = farmerDto.firstName || 'Unknown';\n    if (!farmerDto.dateOfBirth) farmerDto.dateOfBirth = '1990-01-01';\n    if (!farmerDto.gender) farmerDto.gender = 'Male';\n    if (!farmerDto.nationality) farmerDto.nationality = 'Indian';\n    if (!farmerDto.country) farmerDto.country = 'India';\n    \n    // Ensure contact numbers match pattern (10 digits)\n    if (farmerDto.contactNumber && !/^\\d{10}$/.test(farmerDto.contactNumber)) {\n      console.warn('⚠️ Contact number must be 10 digits:', farmerDto.contactNumber);\n    }\n    if (farmerDto.alternativeContactNumber && !/^\\d{10}$/.test(farmerDto.alternativeContactNumber)) {\n      console.warn('⚠️ Alternative contact number must be 10 digits:', farmerDto.alternativeContactNumber);\n    }\n    \n    // Ensure pincode is 6 digits\n    if (farmerDto.pincode && !/^\\d{6}$/.test(farmerDto.pincode)) {\n      console.warn('⚠️ Pincode must be 6 digits:', farmerDto.pincode);\n    }\n    \n    // Add farmerDto as JSON string\n    formData.append('farmerDto', JSON.stringify(farmerDto));\n    \n    // Add files if they exist\n    if (photo instanceof File) {\n      formData.append('photo', photo);\n    }\n    if (passbookPhoto instanceof File) {\n      formData.append('passbookPhoto', passbookPhoto);\n    }\n    if (aadhaar instanceof File) {\n      formData.append('aadhaar', aadhaar);\n    }\n    if (soilTestCertificate instanceof File) {\n      formData.append('soilTestCertificate', soilTestCertificate);\n    }\n    \n    console.log('🔍 Sending to /api/farmers with multipart data');\n    try {\n      const response = await api.post('/farmers', formData, {\n        headers: { 'Content-Type': 'multipart/form-data' }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('❌ Server error details:', error.response?.data);\n      if (error.response?.status === 500) {\n        throw new Error(`Server error: ${error.response?.data?.message || 'Internal server error. Please check all required fields.'}`);\n      }\n      throw error;\n    }\n  },\n\n  // Update farmer\n  updateFarmer: async (id, farmerData) => {\n    const response = await api.put(`/super-admin/farmers/${id}`, farmerData);\n    return response.data;\n  },\n\n  // Delete farmer\n  deleteFarmer: async (id) => {\n    const response = await api.delete(`/super-admin/farmers/${id}`);\n    return response.data;\n  },\n\n  // Assign farmer to employee\n  assignFarmer: async (farmerId, employeeId) => {\n    const response = await api.post(`/super-admin/farmers/${farmerId}/assign`, { employeeId });\n    return response.data;\n  },\n\n  // Get farmer statistics\n  getFarmerStats: async () => {\n    const response = await api.get('/super-admin/farmers/stats');\n    return response.data;\n  }\n};\n\n// Admin-specific API calls\nexport const adminAPI = {\n  // Get all farmers for admin\n  getAllFarmers: async (filters = {}) => {\n    const response = await api.get('/admin/farmers', { params: filters });\n    return response.data;\n  },\n\n  // Get all employees for admin\n  getAllEmployees: async (filters = {}) => {\n    const response = await api.get('/admin/employees', { params: filters });\n    return response.data;\n  },\n\n  // Get farmers with KYC status\n  getFarmersWithKyc: async () => {\n    const response = await api.get('/admin/farmers-with-kyc');\n    return response.data;\n  },\n\n  // Get employees with stats\n  getEmployeesWithStats: async () => {\n    const response = await api.get('/admin/employees-with-stats');\n    return response.data;\n  },\n\n  // Get farmers by employee\n  getFarmersByEmployee: async (employeeId) => {\n    const response = await api.get(`/admin/employees/${employeeId}/assigned-farmers`);\n    return response.data;\n  },\n\n  // Get todo list for admin\n  getTodoList: async () => {\n    const response = await api.get('/admin/todo-list');\n    return response.data;\n  },\n\n  // Get enhanced todo list\n  getEnhancedTodoList: async () => {\n    const response = await api.get('/admin/enhanced-todo-list');\n    return response.data;\n  },\n\n  // Get dashboard stats\n  getDashboardStats: async () => {\n    const response = await api.get('/admin/dashboard-stats');\n    return response.data;\n  },\n\n  // Filter farmers\n  filterFarmers: async (filters = {}) => {\n    const response = await api.get('/admin/farmers/filter', { params: filters });\n    return response.data;\n  },\n\n  // Get locations\n  getLocations: async () => {\n    const response = await api.get('/admin/locations');\n    return response.data;\n  },\n\n  // Bulk assign farmers to employee\n  bulkAssignFarmers: async (farmerIds, employeeId) => {\n    const response = await api.post('/admin/bulk-assign-farmers', { farmerIds, employeeId });\n    return response.data;\n  },\n\n  // Single assign farmer to employee (fallback)\n  assignFarmer: async (farmerId, employeeId) => {\n    const response = await api.post('/admin/assign-farmer', null, { \n      params: { farmerId, employeeId } \n    });\n    return response.data;\n  },\n\n  // Get assignment history\n  getAssignmentHistory: async (filters = {}) => {\n    const response = await api.get('/admin/assignment-history', { params: filters });\n    return response.data;\n  },\n\n  // Get farmers by assignment status\n  getFarmersByAssignmentStatus: async (assignmentStatus) => {\n    const response = await api.get('/admin/farmers/by-assignment-status', { \n      params: { assignmentStatus } \n    });\n    return response.data;\n  },\n\n  // Get all registrations for admin\n  getAllRegistrations: async (filters = {}) => {\n    const response = await api.get('/admin/registration-list', { params: filters });\n    return response.data;\n  },\n\n  // Get registration list by status for admin\n  getRegistrationListByStatus: async (status) => {\n    const response = await api.get('/admin/registration-list/filter', { params: { status } });\n    return response.data;\n  },\n\n  // Get employee by ID\n  getEmployeeById: async (employeeId) => {\n    const response = await api.get(`/admin/employees/${employeeId}`);\n    return response.data;\n  },\n\n  // Update employee\n  updateEmployee: async (employeeId, employeeData) => {\n    const response = await api.put(`/admin/employees/${employeeId}`, employeeData);\n    return response.data;\n  },\n\n  // Approve registration for admin\n  approveRegistration: async (registrationId, approvalData) => {\n    const response = await api.post(`/admin/registrations/${registrationId}/approve`, approvalData);\n    return response.data;\n  },\n\n  // Reject registration for admin\n  rejectRegistration: async (registrationId, rejectionData) => {\n    const response = await api.post(`/admin/registrations/${registrationId}/reject`, rejectionData);\n    return response.data;\n  }\n};\n\n// Employees API calls (for Super Admin and Admin)\nexport const employeesAPI = {\n  // Get all employees\n  getAllEmployees: async (filters = {}) => {\n    const response = await api.get('/super-admin/employees', { params: filters });\n    return response.data;\n  },\n\n  // Get employee by ID\n  getEmployeeById: async (id) => {\n    const response = await api.get(`/super-admin/employees/${id}`);\n    return response.data;\n  },\n\n  // Create employee\n  createEmployee: async (employeeData) => {\n    const response = await api.post('/super-admin/employees', employeeData);\n    return response.data;\n  },\n\n  // Update employee\n  updateEmployee: async (id, employeeData) => {\n    const response = await api.put(`/super-admin/employees/${id}`, employeeData);\n    return response.data;\n  },\n\n  // Delete employee\n  deleteEmployee: async (id) => {\n    const response = await api.delete(`/super-admin/employees/${id}`);\n    return response.data;\n  },\n\n  // Get assigned farmers for employee\n  getAssignedFarmers: async (employeeId) => {\n    const response = await api.get(`/super-admin/employees/${employeeId}/assigned-farmers`);\n    return response.data;\n  },\n\n  // Get employee statistics\n  getEmployeeStats: async () => {\n    const response = await api.get('/super-admin/employees/stats');\n    return response.data;\n  }\n};\n\n// Employee-specific API calls (for Employee role)\nexport const employeeAPI = {\n  // Get assigned farmers for current employee\n  getAssignedFarmers: async (employeeId) => {\n    try {\n      console.log('🔄 Fetching assigned farmers from dashboard endpoint');\n      const response = await api.get('/employees/dashboard/assigned-farmers');\n      console.log('✅ Success with dashboard endpoint');\n      return response.data;\n    } catch (error) {\n      console.error('❌ Failed to fetch assigned farmers:', error);\n      throw error;\n    }\n  },\n\n  // Get employee profile\n  getProfile: async () => {\n    const response = await api.get('/employees/profile');\n    return response.data;\n  },\n\n  // Update employee profile\n  updateProfile: async (profileData) => {\n    const response = await api.put('/employees/profile', profileData);\n    return response.data;\n  },\n\n  // Get employee statistics\n  getStats: async () => {\n    const response = await api.get('/employees/stats');\n    return response.data;\n  }\n};\n\n// Registrations API calls\nexport const registrationsAPI = {\n  // Get all registrations\n  getAllRegistrations: async (filters = {}) => {\n    const response = await api.get('/registrations', { params: filters });\n    return response.data;\n  },\n\n  // Get registration by ID\n  getRegistrationById: async (id) => {\n    const response = await api.get(`/registrations/${id}`);\n    return response.data;\n  },\n\n  // Approve registration\n  approveRegistration: async (id, approvalData) => {\n    const response = await api.post(`/registrations/${id}/approve`, approvalData);\n    return response.data;\n  },\n\n  // Reject registration\n  rejectRegistration: async (id, rejectionData) => {\n    const response = await api.post(`/registrations/${id}/reject`, rejectionData);\n    return response.data;\n  },\n\n  // Get registration statistics\n  getRegistrationStats: async () => {\n    const response = await api.get('/registrations/stats');\n    return response.data;\n  }\n};\n\n// KYC API calls\nexport const kycAPI = {\n  // Upload KYC documents\n  uploadDocuments: async (farmerId, documents) => {\n    const formData = new FormData();\n    Object.keys(documents).forEach(key => {\n      if (documents[key]) {\n        formData.append(key, documents[key]);\n      }\n    });\n    \n    const response = await api.post(`/employees/kyc/${farmerId}/upload`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    });\n    return response.data;\n  },\n\n  // Approve KYC\n  approveKYC: async (farmerId, approvalData) => {\n    const response = await api.put(`/employees/kyc/approve/${farmerId}`);\n    return response.data;\n  },\n\n  // Reject KYC\n  rejectKYC: async (farmerId, rejectionData) => {\n    const response = await api.put(`/employees/kyc/reject/${farmerId}`, {\n      reason: rejectionData.reason || 'KYC rejected'\n    });\n    return response.data;\n  },\n\n  // Refer back KYC\n  referBackKYC: async (farmerId, referBackData) => {\n    const response = await api.put(`/employees/kyc/refer-back/${farmerId}`, {\n      reason: referBackData.reason || 'KYC referred back'\n    });\n    return response.data;\n  },\n\n  // Get KYC status\n  getKYCStatus: async (farmerId) => {\n    const response = await api.get(`/employees/kyc/${farmerId}/status`);\n    return response.data;\n  },\n\n  // Get KYC documents\n  getKYCDocuments: async (farmerId) => {\n    const response = await api.get(`/employees/kyc/${farmerId}/documents`);\n    return response.data;\n  }\n};\n\n// Dashboard API calls\nexport const dashboardAPI = {\n  // Get dashboard statistics\n  getDashboardStats: async () => {\n    const response = await api.get('/dashboard/stats');\n    return response.data;\n  },\n\n  // Get admin dashboard data\n  getAdminDashboardData: async () => {\n    const response = await api.get('/dashboard/admin');\n    return response.data;\n  },\n\n  // Get super admin dashboard data\n  getSuperAdminDashboardData: async () => {\n    const response = await api.get('/dashboard/super-admin');\n    return response.data;\n  },\n\n  // Get employee dashboard data\n  getEmployeeDashboardData: async (employeeId) => {\n    const response = await api.get(`/dashboard/employee/${employeeId}`);\n    return response.data;\n  },\n\n  // Get recent activity\n  getRecentActivity: async () => {\n    const response = await api.get('/dashboard/recent-activity');\n    return response.data;\n  }\n};\n\n// Main API service object\nexport const apiService = {\n  // Authentication\n  login: authAPI.login,\n  getProfile: authAPI.getProfile,\n  register: authAPI.register,\n  sendOTP: authAPI.sendOTP,\n  verifyOTP: authAPI.verifyOTP,\n  resendOTP: authAPI.resendOTP,\n  forgotPassword: authAPI.forgotPassword,\n  forgotUserId: authAPI.forgotUserId,\n  resetPassword: authAPI.resetPassword,\n  changePassword: authAPI.changePassword,\n  changeUserId: authAPI.changeUserId,\n  logout: authAPI.logout,\n\n  // User management\n  getAllUsers: superAdminAPI.getAllUsers,\n  getUserById: superAdminAPI.getUserById,\n  updateUser: superAdminAPI.updateUser,\n  deleteUser: superAdminAPI.deleteUser,\n  forcePasswordChange: superAdminAPI.forcePasswordChange,\n\n  // Farmer management\n  createFarmer: farmersAPI.createFarmer,\n  getFarmerById: farmersAPI.getFarmerById,\n  getAllFarmers: farmersAPI.getAllFarmers,\n  updateFarmer: farmersAPI.updateFarmer,\n  deleteFarmer: farmersAPI.deleteFarmer,\n  getAddressByPincode: authAPI.getAddressByPincode,\n  getFarmerDashboardData: async (email) => {\n    const response = await api.get(`/farmers/dashboard/by-email?email=${email}`);\n    return response.data;\n  },\n\n  // Employee management\n  createEmployee: employeesAPI.createEmployee,\n  getEmployeeById: employeesAPI.getEmployeeById,\n  getAllEmployees: employeesAPI.getAllEmployees,\n  updateEmployee: employeesAPI.updateEmployee,\n  deleteEmployee: employeesAPI.deleteEmployee,\n  assignFarmerToEmployee: adminAPI.assignFarmer,\n  getFarmersByEmployee: adminAPI.getFarmersByEmployee,\n  approveKyc: kycAPI.approveKYC,\n  referBackKyc: kycAPI.referBackKYC,\n  rejectKyc: kycAPI.rejectKYC,\n\n  // Dashboard\n  getDashboardStats: dashboardAPI.getDashboardStats,\n  getRecentActivity: dashboardAPI.getRecentActivity,\n  getFarmerStats: farmersAPI.getFarmerStats,\n  getEmployeeStats: employeesAPI.getEmployeeStats,\n  getKycStats: kycAPI.getKYCStatus,\n\n  // Bulk Operations\n  bulkImport: async (type, formData) => {\n    const response = await api.post(`/bulk/import/${type}`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    });\n    return response.data;\n  },\n\n  bulkExport: async (type, filters) => {\n    const response = await api.post(`/bulk/export/${type}`, filters, {\n      responseType: 'blob',\n    });\n    return response.data;\n  },\n\n  downloadTemplate: async (type) => {\n    const response = await api.get(`/bulk/template/${type}`, {\n      responseType: 'blob',\n    });\n    return response.data;\n  },\n\n  getImportStatus: async (importId) => {\n    const response = await api.get(`/bulk/import/status/${importId}`);\n    return response.data;\n  },\n\n  getImportHistory: async (userEmail) => {\n    const response = await api.get(`/bulk/import/history?userEmail=${userEmail}`);\n    return response.data;\n  },\n\n  bulkAssignFarmersToEmployee: async (farmerIds, employeeId) => {\n    const response = await api.post('/bulk/assign/farmers-to-employee', null, {\n      params: {\n        farmerIds: farmerIds.join(','),\n        employeeId,\n      },\n    });\n    return response.data;\n  },\n\n  // New: assign by farmer names and employee email\n  bulkAssignFarmersByNames: async (farmerNames, employeeEmail) => {\n    const response = await api.post('/bulk/assign/farmers-by-names', {\n      farmerNames,\n      employeeEmail,\n    });\n    return response.data;\n  },\n\n  bulkAssignFarmersByLocation: async (location, employee) => {\n    const params = { location };\n    if (typeof employee === 'string') params.employeeEmail = employee;\n    else if (employee != null) params.employeeId = employee;\n    const response = await api.post('/bulk/assign/farmers-by-location', null, { params });\n    return response.data;\n  },\n\n  bulkAssignFarmersRoundRobin: async (farmerIds) => {\n    const response = await api.post('/bulk/assign/farmers-round-robin', null, {\n      params: {\n        farmerIds: farmerIds.join(','),\n      },\n    });\n    return response.data;\n  },\n};\n\nexport default api; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}